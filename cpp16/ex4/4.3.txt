-----------
char ch;

depends, most likely header.
since variable declaration, source file if used as local variable
-----------
string s;

depends, most likely header.
since variable declaration, source file if used as local variable
-----------
extern int error_number;

header.
extern tells the compiler that the variabel is declared here and defined somewhere else.
-----------
static double sq(double);

header.
static variable is the same for every obj of the class
-----------
int count=1;

depends:
most likely source, since not const
header if something like a reference counter
-----------
const double pi=3.5;
header
if it doesn't change, it should be clearly visible.
-----------
struct fraction { int c; int d; };

declaration therefore header
-----------
char *name="It's me";

most likely source since allocation of memory, becouse its small itmay also be in header
-----------
char *prog[]={"echo","hello","world!",NULL};

most likely source since allocation of memory, may be expensive in header
-----------

extern "C" void c_swap(int *a, int *b);

header
extern decl.
-----------

double sqrt(double);

header function decl.
-----------

void swap(int &a, int &b) { int c=a; a=b; b=c;}

source, may also be inlined in header
-----------
template<typename T> T add(T a, T b) { return a+b; }
header, template definition

-----------
namespace NS { int a; }

most likely header.
should be available for the hole namespace. including something in a not .h-file might cause unexpected errors. (not including the necessary file)
-----------
struct user;

header.
struct def